#! /usr/bin/env node

const app = require('../app')
const debugWWW = require('debug')('nerdbaybackend:WWW')
const debugErrorWWW = require('debug')('nerdbaybackend:errorWWW')
const http = require('http')

let port = normalizePort(process.env.PORT || '9292')
app.set('port', port)

let server = http.createServer(app)

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

function normalizePort(val) {
  let port = parseInt(val, 10)
  if (isNaN(port)){
    return val
  }

  if (port >= 0){
    return port
  }

  return false
}

function onError(error){
  if (error.syscall !== 'listen'){
    throw error
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  switch (error.code){
  case 'EACCES':
    debugErrorWWW(bind + ' requires elevated priviledges.')
    process.exit(1)
    break;
  case 'EADDRINUSE':
    debugErrorWWW(bind + ' is already in use.')
    process.exit(1)
    break;
  default:
    throw error;
  }
}

function onListening(){
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debugWWW('Listening on ' + bind)
}